version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper

  zipkin:
    image: openzipkin/zipkin:2.23
    container_name: zipkin
    ports:
      - "9411:9411"

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:9.0.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus

  postgres:
    image: postgres:13-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: shopcloud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  config-server:
    build:
      context: ./cloud/config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS: file:/config
    volumes:
      - ./config-repo:/config

  config-server:
    build:
      context: ./cloud/config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS: file:/config
    volumes:
      - ./config-repo:/config

  api-gateway:
    build:
      context: ./cloud/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server

  user-service:
    build:
      context: ./cloud/user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - postgres

  product-service:
    build:
      context: ./cloud/product-service
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - postgres

  order-service:
    build:
      context: ./cloud/order-service
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - postgres
      - kafka

  inventory-service:
    build:
      context: ./cloud/inventory-service
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - postgres

  payment-service:
    build:
      context: ./cloud/payment-service
      dockerfile: Dockerfile
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - postgres

  notification-service:
    build:
      context: ./cloud/notification-service
      dockerfile: Dockerfile
    ports:
      - "8086:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - kafka

  rating-reviews-service:
    build:
      context: ./cloud/rating-reviews-service
      dockerfile: Dockerfile
    ports:
      - "8087:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server
      - postgres

  hello-service:
    build:
      context: ./cloud/hello-service
      dockerfile: Dockerfile
    ports:
      - "8088:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - config-server

volumes:
  postgres_data:

